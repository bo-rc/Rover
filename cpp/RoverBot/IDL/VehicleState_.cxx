// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleState_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "VehicleState_.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

VehicleState_::VehicleState_()
{
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@371a67ec
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ed828d
    m_y = 0.0;
    // m_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@50d0686
    m_z = 0.0;
    // m_vx com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a3d45bd
    m_vx = 0.0;
    // m_vy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77f99a05
    m_vy = 0.0;
    // m_vz com.eprosima.idl.parser.typecode.PrimitiveTypeCode@63440df3
    m_vz = 0.0;
    // m_roll com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3aeaafa6
    m_roll = 0.0;
    // m_pitch com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76a3e297
    m_pitch = 0.0;
    // m_yaw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4d3167f4
    m_yaw = 0.0;
    // m_vRoll com.eprosima.idl.parser.typecode.PrimitiveTypeCode@ed9d034
    m_vRoll = 0.0;
    // m_vPitch com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6121c9d6
    m_vPitch = 0.0;
    // m_vYaw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@87f383f
    m_vYaw = 0.0;

}

VehicleState_::~VehicleState_()
{












}

VehicleState_::VehicleState_(const VehicleState_ &x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_vRoll = x.m_vRoll;
    m_vPitch = x.m_vPitch;
    m_vYaw = x.m_vYaw;
}

VehicleState_::VehicleState_(VehicleState_ &&x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_vRoll = x.m_vRoll;
    m_vPitch = x.m_vPitch;
    m_vYaw = x.m_vYaw;
}

VehicleState_& VehicleState_::operator=(const VehicleState_ &x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_vRoll = x.m_vRoll;
    m_vPitch = x.m_vPitch;
    m_vYaw = x.m_vYaw;

    return *this;
}

VehicleState_& VehicleState_::operator=(VehicleState_ &&x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
    m_vRoll = x.m_vRoll;
    m_vPitch = x.m_vPitch;
    m_vYaw = x.m_vYaw;

    return *this;
}

size_t VehicleState_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t VehicleState_::getCdrSerializedSize(const VehicleState_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void VehicleState_::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_x;
    scdr << m_y;
    scdr << m_z;
    scdr << m_vx;
    scdr << m_vy;
    scdr << m_vz;
    scdr << m_roll;
    scdr << m_pitch;
    scdr << m_yaw;
    scdr << m_vRoll;
    scdr << m_vPitch;
    scdr << m_vYaw;
}

void VehicleState_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
    dcdr >> m_vx;
    dcdr >> m_vy;
    dcdr >> m_vz;
    dcdr >> m_roll;
    dcdr >> m_pitch;
    dcdr >> m_yaw;
    dcdr >> m_vRoll;
    dcdr >> m_vPitch;
    dcdr >> m_vYaw;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void VehicleState_::x(float _x)
{
m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float VehicleState_::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& VehicleState_::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void VehicleState_::y(float _y)
{
m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float VehicleState_::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& VehicleState_::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void VehicleState_::z(float _z)
{
m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
float VehicleState_::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
float& VehicleState_::z()
{
    return m_z;
}

/*!
 * @brief This function sets a value in member vx
 * @param _vx New value for member vx
 */
void VehicleState_::vx(float _vx)
{
m_vx = _vx;
}

/*!
 * @brief This function returns the value of member vx
 * @return Value of member vx
 */
float VehicleState_::vx() const
{
    return m_vx;
}

/*!
 * @brief This function returns a reference to member vx
 * @return Reference to member vx
 */
float& VehicleState_::vx()
{
    return m_vx;
}

/*!
 * @brief This function sets a value in member vy
 * @param _vy New value for member vy
 */
void VehicleState_::vy(float _vy)
{
m_vy = _vy;
}

/*!
 * @brief This function returns the value of member vy
 * @return Value of member vy
 */
float VehicleState_::vy() const
{
    return m_vy;
}

/*!
 * @brief This function returns a reference to member vy
 * @return Reference to member vy
 */
float& VehicleState_::vy()
{
    return m_vy;
}

/*!
 * @brief This function sets a value in member vz
 * @param _vz New value for member vz
 */
void VehicleState_::vz(float _vz)
{
m_vz = _vz;
}

/*!
 * @brief This function returns the value of member vz
 * @return Value of member vz
 */
float VehicleState_::vz() const
{
    return m_vz;
}

/*!
 * @brief This function returns a reference to member vz
 * @return Reference to member vz
 */
float& VehicleState_::vz()
{
    return m_vz;
}

/*!
 * @brief This function sets a value in member roll
 * @param _roll New value for member roll
 */
void VehicleState_::roll(float _roll)
{
m_roll = _roll;
}

/*!
 * @brief This function returns the value of member roll
 * @return Value of member roll
 */
float VehicleState_::roll() const
{
    return m_roll;
}

/*!
 * @brief This function returns a reference to member roll
 * @return Reference to member roll
 */
float& VehicleState_::roll()
{
    return m_roll;
}

/*!
 * @brief This function sets a value in member pitch
 * @param _pitch New value for member pitch
 */
void VehicleState_::pitch(float _pitch)
{
m_pitch = _pitch;
}

/*!
 * @brief This function returns the value of member pitch
 * @return Value of member pitch
 */
float VehicleState_::pitch() const
{
    return m_pitch;
}

/*!
 * @brief This function returns a reference to member pitch
 * @return Reference to member pitch
 */
float& VehicleState_::pitch()
{
    return m_pitch;
}

/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void VehicleState_::yaw(float _yaw)
{
m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
float VehicleState_::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
float& VehicleState_::yaw()
{
    return m_yaw;
}

/*!
 * @brief This function sets a value in member vRoll
 * @param _vRoll New value for member vRoll
 */
void VehicleState_::vRoll(float _vRoll)
{
m_vRoll = _vRoll;
}

/*!
 * @brief This function returns the value of member vRoll
 * @return Value of member vRoll
 */
float VehicleState_::vRoll() const
{
    return m_vRoll;
}

/*!
 * @brief This function returns a reference to member vRoll
 * @return Reference to member vRoll
 */
float& VehicleState_::vRoll()
{
    return m_vRoll;
}

/*!
 * @brief This function sets a value in member vPitch
 * @param _vPitch New value for member vPitch
 */
void VehicleState_::vPitch(float _vPitch)
{
m_vPitch = _vPitch;
}

/*!
 * @brief This function returns the value of member vPitch
 * @return Value of member vPitch
 */
float VehicleState_::vPitch() const
{
    return m_vPitch;
}

/*!
 * @brief This function returns a reference to member vPitch
 * @return Reference to member vPitch
 */
float& VehicleState_::vPitch()
{
    return m_vPitch;
}

/*!
 * @brief This function sets a value in member vYaw
 * @param _vYaw New value for member vYaw
 */
void VehicleState_::vYaw(float _vYaw)
{
m_vYaw = _vYaw;
}

/*!
 * @brief This function returns the value of member vYaw
 * @return Value of member vYaw
 */
float VehicleState_::vYaw() const
{
    return m_vYaw;
}

/*!
 * @brief This function returns a reference to member vYaw
 * @return Reference to member vYaw
 */
float& VehicleState_::vYaw()
{
    return m_vYaw;
}


size_t VehicleState_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;















    return current_align;
}

bool VehicleState_::isKeyDefined()
{
   return false;
}

void VehicleState_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
}
