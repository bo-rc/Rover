// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Route_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Route_.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Route_::Route_()
{
    // m_m_waypoints com.eprosima.idl.parser.typecode.SequenceTypeCode@40f08448


}

Route_::~Route_()
{
}

Route_::Route_(const Route_ &x)
{
    m_m_waypoints = x.m_m_waypoints;
}

Route_::Route_(Route_ &&x)
{
    m_m_waypoints = std::move(x.m_m_waypoints);
}

Route_& Route_::operator=(const Route_ &x)
{

    m_m_waypoints = x.m_m_waypoints;

    return *this;
}

Route_& Route_::operator=(Route_ &&x)
{

    m_m_waypoints = std::move(x.m_m_waypoints);

    return *this;
}

size_t Route_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += NavPose2d_::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t Route_::getCdrSerializedSize(const Route_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.m_waypoints().size(); ++a)
    {
        current_alignment += NavPose2d_::getCdrSerializedSize(data.m_waypoints().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void Route_::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_m_waypoints;}

void Route_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_m_waypoints;}

/*!
 * @brief This function copies the value in member m_waypoints
 * @param _m_waypoints New value to be copied in member m_waypoints
 */
void Route_::m_waypoints(const std::vector<NavPose2d_> &_m_waypoints)
{
m_m_waypoints = _m_waypoints;
}

/*!
 * @brief This function moves the value in member m_waypoints
 * @param _m_waypoints New value to be moved in member m_waypoints
 */
void Route_::m_waypoints(std::vector<NavPose2d_> &&_m_waypoints)
{
m_m_waypoints = std::move(_m_waypoints);
}

/*!
 * @brief This function returns a constant reference to member m_waypoints
 * @return Constant reference to member m_waypoints
 */
const std::vector<NavPose2d_>& Route_::m_waypoints() const
{
    return m_m_waypoints;
}

/*!
 * @brief This function returns a reference to member m_waypoints
 * @return Reference to member m_waypoints
 */
std::vector<NavPose2d_>& Route_::m_waypoints()
{
    return m_m_waypoints;
}

size_t Route_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Route_::isKeyDefined()
{
   return false;
}

void Route_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}
