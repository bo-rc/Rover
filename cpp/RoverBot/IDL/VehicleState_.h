// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleState_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _VEHICLESTATE__H_
#define _VEHICLESTATE__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VehicleState__SOURCE)
#define VehicleState__DllAPI __declspec( dllexport )
#else
#define VehicleState__DllAPI __declspec( dllimport )
#endif // VehicleState__SOURCE
#else
#define VehicleState__DllAPI
#endif
#else
#define VehicleState__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure VehicleState_ defined by the user in the IDL file.
 * @ingroup VEHICLESTATE_
 */
class VehicleState_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VehicleState_();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VehicleState_();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VehicleState_ that will be copied.
     */
    eProsima_user_DllExport VehicleState_(const VehicleState_ &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VehicleState_ that will be copied.
     */
    eProsima_user_DllExport VehicleState_(VehicleState_ &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VehicleState_ that will be copied.
     */
    eProsima_user_DllExport VehicleState_& operator=(const VehicleState_ &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VehicleState_ that will be copied.
     */
    eProsima_user_DllExport VehicleState_& operator=(VehicleState_ &&x);

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(float _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport float x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport float& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(float _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport float y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport float& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(float _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport float z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport float& z();

    /*!
     * @brief This function sets a value in member vx
     * @param _vx New value for member vx
     */
    eProsima_user_DllExport void vx(float _vx);

    /*!
     * @brief This function returns the value of member vx
     * @return Value of member vx
     */
    eProsima_user_DllExport float vx() const;

    /*!
     * @brief This function returns a reference to member vx
     * @return Reference to member vx
     */
    eProsima_user_DllExport float& vx();

    /*!
     * @brief This function sets a value in member vy
     * @param _vy New value for member vy
     */
    eProsima_user_DllExport void vy(float _vy);

    /*!
     * @brief This function returns the value of member vy
     * @return Value of member vy
     */
    eProsima_user_DllExport float vy() const;

    /*!
     * @brief This function returns a reference to member vy
     * @return Reference to member vy
     */
    eProsima_user_DllExport float& vy();

    /*!
     * @brief This function sets a value in member vz
     * @param _vz New value for member vz
     */
    eProsima_user_DllExport void vz(float _vz);

    /*!
     * @brief This function returns the value of member vz
     * @return Value of member vz
     */
    eProsima_user_DllExport float vz() const;

    /*!
     * @brief This function returns a reference to member vz
     * @return Reference to member vz
     */
    eProsima_user_DllExport float& vz();

    /*!
     * @brief This function sets a value in member roll
     * @param _roll New value for member roll
     */
    eProsima_user_DllExport void roll(float _roll);

    /*!
     * @brief This function returns the value of member roll
     * @return Value of member roll
     */
    eProsima_user_DllExport float roll() const;

    /*!
     * @brief This function returns a reference to member roll
     * @return Reference to member roll
     */
    eProsima_user_DllExport float& roll();

    /*!
     * @brief This function sets a value in member pitch
     * @param _pitch New value for member pitch
     */
    eProsima_user_DllExport void pitch(float _pitch);

    /*!
     * @brief This function returns the value of member pitch
     * @return Value of member pitch
     */
    eProsima_user_DllExport float pitch() const;

    /*!
     * @brief This function returns a reference to member pitch
     * @return Reference to member pitch
     */
    eProsima_user_DllExport float& pitch();

    /*!
     * @brief This function sets a value in member yaw
     * @param _yaw New value for member yaw
     */
    eProsima_user_DllExport void yaw(float _yaw);

    /*!
     * @brief This function returns the value of member yaw
     * @return Value of member yaw
     */
    eProsima_user_DllExport float yaw() const;

    /*!
     * @brief This function returns a reference to member yaw
     * @return Reference to member yaw
     */
    eProsima_user_DllExport float& yaw();

    /*!
     * @brief This function sets a value in member vRoll
     * @param _vRoll New value for member vRoll
     */
    eProsima_user_DllExport void vRoll(float _vRoll);

    /*!
     * @brief This function returns the value of member vRoll
     * @return Value of member vRoll
     */
    eProsima_user_DllExport float vRoll() const;

    /*!
     * @brief This function returns a reference to member vRoll
     * @return Reference to member vRoll
     */
    eProsima_user_DllExport float& vRoll();

    /*!
     * @brief This function sets a value in member vPitch
     * @param _vPitch New value for member vPitch
     */
    eProsima_user_DllExport void vPitch(float _vPitch);

    /*!
     * @brief This function returns the value of member vPitch
     * @return Value of member vPitch
     */
    eProsima_user_DllExport float vPitch() const;

    /*!
     * @brief This function returns a reference to member vPitch
     * @return Reference to member vPitch
     */
    eProsima_user_DllExport float& vPitch();

    /*!
     * @brief This function sets a value in member vYaw
     * @param _vYaw New value for member vYaw
     */
    eProsima_user_DllExport void vYaw(float _vYaw);

    /*!
     * @brief This function returns the value of member vYaw
     * @return Value of member vYaw
     */
    eProsima_user_DllExport float vYaw() const;

    /*!
     * @brief This function returns a reference to member vYaw
     * @return Reference to member vYaw
     */
    eProsima_user_DllExport float& vYaw();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const VehicleState_& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    float m_x;
    float m_y;
    float m_z;
    float m_vx;
    float m_vy;
    float m_vz;
    float m_roll;
    float m_pitch;
    float m_yaw;
    float m_vRoll;
    float m_vPitch;
    float m_vYaw;
};

#endif // _VEHICLESTATE__H_