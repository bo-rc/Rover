// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OpCmd_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "OpCmd_.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

OpCmd_::OpCmd_()
{
    // m_OpCmd com.eprosima.idl.parser.typecode.StringTypeCode@25af5db5
    m_OpCmd ="";

}

OpCmd_::~OpCmd_()
{
}

OpCmd_::OpCmd_(const OpCmd_ &x)
{
    m_OpCmd = x.m_OpCmd;
}

OpCmd_::OpCmd_(OpCmd_ &&x)
{
    m_OpCmd = std::move(x.m_OpCmd);
}

OpCmd_& OpCmd_::operator=(const OpCmd_ &x)
{

    m_OpCmd = x.m_OpCmd;

    return *this;
}

OpCmd_& OpCmd_::operator=(OpCmd_ &&x)
{

    m_OpCmd = std::move(x.m_OpCmd);

    return *this;
}

size_t OpCmd_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t OpCmd_::getCdrSerializedSize(const OpCmd_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.OpCmd().size() + 1;

    return current_alignment - initial_alignment;
}

void OpCmd_::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_OpCmd;
}

void OpCmd_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_OpCmd;
}

/*!
 * @brief This function copies the value in member OpCmd
 * @param _OpCmd New value to be copied in member OpCmd
 */
void OpCmd_::OpCmd(const std::string &_OpCmd)
{
m_OpCmd = _OpCmd;
}

/*!
 * @brief This function moves the value in member OpCmd
 * @param _OpCmd New value to be moved in member OpCmd
 */
void OpCmd_::OpCmd(std::string &&_OpCmd)
{
m_OpCmd = std::move(_OpCmd);
}

/*!
 * @brief This function returns a constant reference to member OpCmd
 * @return Constant reference to member OpCmd
 */
const std::string& OpCmd_::OpCmd() const
{
    return m_OpCmd;
}

/*!
 * @brief This function returns a reference to member OpCmd
 * @return Reference to member OpCmd
 */
std::string& OpCmd_::OpCmd()
{
    return m_OpCmd;
}

size_t OpCmd_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool OpCmd_::isKeyDefined()
{
   return false;
}

void OpCmd_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}
