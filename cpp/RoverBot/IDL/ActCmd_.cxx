// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ActCmd_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "ActCmd_.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ActCmd_::ActCmd_()
{
    // m_steer com.eprosima.idl.parser.typecode.PrimitiveTypeCode@46daef40
    m_steer = 0.0;
    // m_throttle com.eprosima.idl.parser.typecode.PrimitiveTypeCode@262b2c86
    m_throttle = 0.0;

}

ActCmd_::~ActCmd_()
{


}

ActCmd_::ActCmd_(const ActCmd_ &x)
{
    m_steer = x.m_steer;
    m_throttle = x.m_throttle;
}

ActCmd_::ActCmd_(ActCmd_ &&x)
{
    m_steer = x.m_steer;
    m_throttle = x.m_throttle;
}

ActCmd_& ActCmd_::operator=(const ActCmd_ &x)
{

    m_steer = x.m_steer;
    m_throttle = x.m_throttle;

    return *this;
}

ActCmd_& ActCmd_::operator=(ActCmd_ &&x)
{

    m_steer = x.m_steer;
    m_throttle = x.m_throttle;

    return *this;
}

size_t ActCmd_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ActCmd_::getCdrSerializedSize(const ActCmd_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ActCmd_::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_steer;
    scdr << m_throttle;
}

void ActCmd_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_steer;
    dcdr >> m_throttle;
}

/*!
 * @brief This function sets a value in member steer
 * @param _steer New value for member steer
 */
void ActCmd_::steer(float _steer)
{
m_steer = _steer;
}

/*!
 * @brief This function returns the value of member steer
 * @return Value of member steer
 */
float ActCmd_::steer() const
{
    return m_steer;
}

/*!
 * @brief This function returns a reference to member steer
 * @return Reference to member steer
 */
float& ActCmd_::steer()
{
    return m_steer;
}

/*!
 * @brief This function sets a value in member throttle
 * @param _throttle New value for member throttle
 */
void ActCmd_::throttle(float _throttle)
{
m_throttle = _throttle;
}

/*!
 * @brief This function returns the value of member throttle
 * @return Value of member throttle
 */
float ActCmd_::throttle() const
{
    return m_throttle;
}

/*!
 * @brief This function returns a reference to member throttle
 * @return Reference to member throttle
 */
float& ActCmd_::throttle()
{
    return m_throttle;
}


size_t ActCmd_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool ActCmd_::isKeyDefined()
{
   return false;
}

void ActCmd_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}
